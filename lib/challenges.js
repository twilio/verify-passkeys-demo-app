const express = require('express')
const router = express.Router()

const config = require('./config')
const storage = require('./storage')
const {createFactor} = require('./verify-passkeys-service');
const {randomStr} = require("./utils");

// middleware that is specific to this router
router.use((req, res, next) => {
    console.log('Challenges Time: %s', Date.now())
    next()
})
// define the register route
router.post('/create', async (req, res, next) => {
    // TODO Replace it with Verify Passkeys invocation, for example:
    /*let sid = req.body.serviceSid
    try {
        const data = await createFactor(sid);
        res.send(data)
    } catch (err) {
        res.status(500).send(err.message);
    }*/
    console.log("Verify Passkeys create challenges call.")

    const requestBody = req.body;

    const attestation = storage.get(requestBody.userMail + "#factor#verify")
    let allowCredentials;
    if (attestation) {
        allowCredentials = [{type: "public-key", id: attestation.id}]
    }

    let credentialId = btoa("CRED-ID-" + randomStr(20));
    let options = {
        // The challenge is produced by the server; see the Security Considerations
        //challenge: new Uint8Array([4,101,15 /* 29 more random bytes generated by the server */]),
        challenge: btoa("CHALLENGE-CHALLENGE-CREATE-" + randomStr(10)),
        timeout: 120000,  // 2 minutes
        rpId: config.getHostName(),
        userVerification: requestBody.userVerification,
        allowCredentials: allowCredentials
    };

    let credentialRequestOptions = {
        publicKey: options
    }

    let challengeData = {credentialRequestOptions}
    res.send(challengeData);
})
// define the verify route
router.post('/verify', (req, res) => {
    console.log("Verify Passkeys verify challenges call.")

    //TODO pass AuthenticatorAssertionResponse to Verify Passkeys

    const requestBody = req.body;

    res.send(requestBody);
})

module.exports = router
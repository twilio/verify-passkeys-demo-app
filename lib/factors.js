const express = require('express')
const router = express.Router()

const config = require('./config')
const storage = require('./storage')
const {createFactor} = require('./verify-passkeys-service');
const {randomStr} = require("./utils");

const serviceSid = process.env.SERVICE_SID || "VA123456789012345678901234567890bb";

// middleware that is specific to this router
router.use((req, res, next) => {
    console.log('Factor Time: %s url: %s', Date.now(), config.getUrl())
    next()
})
// define the register route
router.post('/create', async (req, res, next) => {
    // TODO Replace it with Verify Passkeys invocation, for example:
    /*let sid = req.body.serviceSid
    try {
        const data = await createFactor(sid);
        res.send(data)
    } catch (err) {
        res.status(500).send(err.message);
    }*/
    console.log("Verify Passkeys create factor call.");

    // create Credential Public Key Request manually
    const requestBody = req.body;
    let credentialCreationOptions = {
        publicKey: {
            // The challenge is produced by the server; see the Security Considerations
            //challenge: new Uint8Array([21, 31, 105 /* 29 more random bytes generated by the server */]),
            //challenge: textEncoder.encode(creatingKeyParameters.factorData.sid),
            challenge: btoa("CHALLENGE-FACTOR-CREATE-" + randomStr(10)),
            // Relying Party:
            rp: {
                id: config.getHostName(),
                name: "ACME Corporation"
            },
            // User:
            user: {
                //id: Uint8Array.from("UD123456789012345678901234567890aa", c => c.charCodeAt(0)),
                id: btoa("USER-" + randomStr(30)),
                name: requestBody.userMail, //"ask.test@twilio.com",
                displayName: requestBody.userFriendlyName, //"Ask Test",
            },
            // This Relying Party will accept either an ES256 or RS256 credential, but
            // prefers an ES256 credential.
            pubKeyCredParams: [
                {
                    type: "public-key",
                    alg: -7 // "ES256" as registered in the IANA COSE Algorithms registry
                },
                {
                    type: "public-key",
                    alg: -257 // Value registered by this specification for "RS256"
                }
            ],
            authenticatorSelection: {
                // Try to use UV if possible. This is also the default.
                userVerification: requestBody.userVerification, //"preferred"
                authenticatorAttachment: requestBody.authenticatorAttachment
            },
            timeout: 360000,  // 6 minutes
            excludeCredentials: [
                // Donâ€™t re-register any authenticator that has one of these credentials
                {
                    //"id": Uint8Array.from(window.atob("ufJWp8YGlibm1Kd9XQBWN1WAw2jy5In2Xhon9HAqcXE="), c => c.charCodeAt(0)),
                    //"id": textEncoder.encode("UD123456789012345678901234567890ax"),
                    "id": btoa("UD123456789012345678901234567890ax"),
                    "type": "public-key"
                },
                {
                    //"id": Uint8Array.from(window.atob("E/e1dhZc++mIsz4f9hb6NifAzJpF1V4mEtRlIPBiWdY="), c => c.charCodeAt(0)),
                    //"id": textEncoder.encode("UD123456789012345678901234567890ay"),
                    "id": btoa("UD123456789012345678901234567890ay"),
                    "type": "public-key"
                }
            ],

            // Make excludeCredentials check backwards compatible with credentials registered with U2F
            //extensions: {"appidExclude": "https://acme.example.com"}
        }
    };

    //local storage
    console.log("save to local storage: " + requestBody.userMail)
    storage.save(requestBody.userMail + "#factor#create", credentialCreationOptions);

    let factorData = {credentialCreationOptions};
    res.send(factorData);
})
// define the verify route
router.post('/verify', (req, res) => {
    console.log("Verify Passkeys verify factor call.")

    //TODO pass AuthenticatorAttestationResponse to Verify Passkeys

    let useMail = req.body.userMail;
    let attestation = req.body.authenticatorAttestationResponse;

    //local storage
    console.log("save to local storage: " + useMail)
    storage.save(useMail + "#factor#verify", attestation);

    res.send(attestation);
})

module.exports = router